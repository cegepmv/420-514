<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PrÃ©alables :: Collecte et interprÃ©tation de donnÃ©es</title>
    <link>http://localhost:1313/420-514/intro/index.html</link>
    <description>Dans ce module nous ferons une courte rÃ©vision des notions essentielles au cours.</description>
    <generator>Hugo</generator>
    <language>fr-ca</language>
    <lastBuildDate>Thu, 21 Aug 2025 11:41:38 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/420-514/intro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RÃ©vision</title>
      <link>http://localhost:1313/420-514/intro/revision/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-514/intro/revision/index.html</guid>
      <description>Rappel API REST ğŸŒ¼ Une API REST se doit dâ€™Ãªtre sans Ã©tat Stateless. La communication entre le client et le serveur ne doit pas dÃ©pendre dâ€™un quelconque contexte provenant du serveur. ğŸŒ¼ Ainsi, chaque requÃªte doit contenir lâ€™ensemble des informations nÃ©cessaires Ã  son traitement. Cela permet au de traiter indiffÃ©remment les requÃªtes de plusieurs clients via de multiples instances de serveurs.&#xA;ğŸŒ¼ Pour chaque rÃ©ponse renvoyÃ©e par lâ€™API, un code doit Ãªtre envoyÃ©, ce code correspond Ã  lâ€™Ã©tat de la requÃªte et dÃ©pend de la rÃ©ussite ou non de celle-ci.</description>
    </item>
    <item>
      <title>Cadriciels rappel</title>
      <link>http://localhost:1313/420-514/intro/frameworkbe/index.html</link>
      <pubDate>Thu, 21 Aug 2025 11:41:38 -0400</pubDate>
      <guid>http://localhost:1313/420-514/intro/frameworkbe/index.html</guid>
      <description>Cadriciel cÃ´tÃ© serveur Quâ€™est-ce quâ€™un cadriciel cÃ´tÃ© serveur ? Un cadriciel (ou framework) est un ensemble structurÃ© dâ€™outils, de bibliothÃ¨ques et de conventions qui facilite et accÃ©lÃ¨re le dÃ©veloppement dâ€™applications. Lorsquâ€™on parle de cadriciel cÃ´tÃ© serveur, on fait rÃ©fÃ©rence aux frameworks conÃ§us pour la partie backend dâ€™une application, câ€™est-Ã -dire :&#xA;la logique mÃ©tier (traitement des donnÃ©es, rÃ¨gles dâ€™affaires) la gestion des requÃªtes/rÃ©ponses entre le client et le serveur la communication avec les bases de donnÃ©es la sÃ©curitÃ© et la gestion des utilisateurs En dâ€™autres termes, au lieu de tout programmer Â« Ã  la main Â», on sâ€™appuie sur une infrastructure dÃ©jÃ  prÃªte qui propose des solutions Ã©prouvÃ©es et standardisÃ©es.</description>
    </item>
  </channel>
</rss>