<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cadriciel (framework) c√¥t√© serveur : Node.js / express :: Collecte et interpr√©tation de donn√©es</title>
    <link>http://localhost:1313/420-514/nodejsframeworkexpress/index.html</link>
    <description>Dans ce module, on va d√©velopper une API ou une application serveur compl√®te avec un cadriciel moderne.</description>
    <generator>Hugo</generator>
    <language>fr-ca</language>
    <atom:link href="http://localhost:1313/420-514/nodejsframeworkexpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üìò NodeJs</title>
      <link>http://localhost:1313/420-514/nodejsframeworkexpress/nodejs/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-514/nodejsframeworkexpress/nodejs/index.html</guid>
      <description>Introduction √† Node.js Historique Avant 2009 le langage (JavaScript) n‚Äô√©tait utilis√© qu‚Äôau c√¥t√© client et ne peut √™tre ex√©cut√© que dans le navigateur (browser) Le code JavaScript √©tait donc cantonn√© au c√¥t√© client. Il servait √† :&#xA;manipuler le DOM (Document Object Model), valider des formulaires, cr√©er des animations simples, ajouter de l‚Äôinteractivit√© √† la page. ‚ö†Ô∏è Aucune possibilit√© de g√©rer :&#xA;des fichiers sur le serveur, une base de donn√©es, un syst√®me de fichiers ou un r√©seau. Tout cela √©tait r√©serv√© aux langages c√¥t√© serveur (PHP, Java, Python, C#, etc.).</description>
    </item>
    <item>
      <title>üìò Express</title>
      <link>http://localhost:1313/420-514/nodejsframeworkexpress/express/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-514/nodejsframeworkexpress/express/index.html</guid>
      <description>Introduction √† Express Express est un framework web minimaliste pour Node.js, permettant de cr√©er des applications web robustes et modulaires. Il facilite la gestion des routes, le rendu de vues dynamiques, et l‚Äôint√©gration de middlewares pour diverses t√¢ches comme les sessions ou l‚Äôauthentification.&#xA;Exemple d‚ÄôExpress const express = require(&#34;express&#34;); const app = express(); const port = 3000; app.get(&#34;/&#34;, (req, res) =&gt; { res.send(&#34;Hello World!&#34;); }); app.listen(port, () =&gt; { console.log(`Application √† l&#39;√©coute sur le port ${port}!`); });</description>
    </item>
    <item>
      <title>üß™ Laboratoire : Commencer avec Node.js et Express.js</title>
      <link>http://localhost:1313/420-514/nodejsframeworkexpress/lab/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-514/nodejsframeworkexpress/lab/index.html</guid>
      <description>1. Installer Node.js Assurez-vous que Node.js est install√© sur votre machine. Vous pouvez le t√©l√©charger depuis le site officiel de Node.js.&#xA;V√©rifier l‚Äôinstallation : node -v npm -v&#xD;Ex√©cuter un script : // hello.js console.log(&#34;Hello Node.js üöÄ&#34;);&#xD;Puis :&#xA;node hello.js&#xD;2. Initialiser un Nouveau Projet Node.js Ouvrez votre terminal et cr√©ez un nouveau dossier pour votre projet. Acc√©dez √† ce dossier, puis ex√©cutez la commande suivante pour initialiser un nouveau projet Node.js :</description>
    </item>
    <item>
      <title>üß™ Laboratoire : Gestion des Erreurs et Logging</title>
      <link>http://localhost:1313/420-514/nodejsframeworkexpress/lab2/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-514/nodejsframeworkexpress/lab2/index.html</guid>
      <description>Partie 1 : Ajouter des Middlewares pour la Gestion des Erreurs et le Logging Ajouter un Middleware de Logging&#xA;Cr√©ez un middleware qui enregistre chaque requ√™te re√ßue par le serveur. Impl√©mentez le code suivant au d√©but de votre fichier index.js : const express = require(&#39;express&#39;); const app = express(); const port = 3000; // Middleware de logging app.use((req, res, next) =&gt; { console.log(`${req.method} ${req.url}`); next(); });&#xD;Ajouter un Middleware de Gestion des Erreurs&#xA;Cr√©ez un middleware pour intercepter les erreurs et envoyer une r√©ponse appropri√©e. Placez ce middleware √† la fin de toutes vos routes dans index.js : // Middleware de gestion des erreurs app.use((err, req, res, next) =&gt; { console.error(err.stack); res.status(500).send(&#39;Une erreur est survenue!&#39;); });&#xD;Partie 2 : Servir des Fichiers Statiques Cr√©er un Dossier public</description>
    </item>
  </channel>
</rss>